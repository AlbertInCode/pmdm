{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Create Your First Video Game","text":"<p>10-Session Workshop \u2022 Beginner Friendly \u2022 Hands-On Learning!</p>"},{"location":"#what-will-you-learn","title":"What Will You Learn?","text":"<p>In this 10-session workshop, we'll cover: - Understanding Game Development Basics - Basic physics implementation - Scoring and lives systems - Multimedia</p>"},{"location":"#tools","title":"\ud83d\udee0 Tools","text":"<ul> <li>Android Studio</li> <li>Git for version control</li> </ul>"},{"location":"day01/","title":"Day 1: Understanding Game Development Basics","text":""},{"location":"day01/#introduction","title":"Introduction","text":"<p>Welcome to your first step into Android game development with Kotlin! Today, we\u2019ll cover the foundational concepts of game development and set up your first project. By the end of this session, you'll understand the game loop mechanism and create a simple <code>SurfaceView</code> to draw on the screen.</p>"},{"location":"day01/#what-is-a-game-loop","title":"What is a Game Loop?","text":"<p>The game loop is the core of any game. It\u2019s a programming construct that ensures the game continuously updates the game state and renders graphics on the screen. Here's a simplified flow:</p> <ol> <li>Process Input: Detect user interactions, like taps or swipes.</li> <li>Update: Change the game state based on logic or physics.</li> <li>Render: Draw the updated state on the screen.</li> </ol> <p>This loop runs repeatedly, creating a smooth and interactive experience.</p>"},{"location":"day01/#game-loop-in-pseudocode","title":"Game Loop in Pseudocode","text":"<pre><code> while (gameIsRunning):\n    processInput()\n    updateGameState()\n    renderGraphics()\n</code></pre> <p>This logic is implemented in Android using a <code>SurfaceView</code> and a thread for rendering.</p>"},{"location":"day01/#setting-up-your-first-android-game-project","title":"Setting Up Your First Android Game Project","text":"<p>To get started:</p> <ol> <li>Open Android Studio and create a new Empty Activity project.</li> <li>Configure the project:</li> <li>Language: Kotlin</li> <li>Minimum SDK: API 21 (Android 5.0)</li> <li>Name the project <code>GameBasics</code>.</li> </ol> <p>After the project is created, we'll set up a <code>SurfaceView</code> to handle custom drawing.</p>"},{"location":"day01/#implementing-a-surfaceview","title":"Implementing a SurfaceView","text":""},{"location":"day01/#step-1-create-a-custom-view","title":"Step 1: Create a Custom View","text":"<p>Follow the steps below:</p> <ol> <li>Create a new Kotlin class named <code>GameView</code>.</li> <li>Add the following code (refer to the external file <code>GameView.kt</code>).</li> <li>Update your <code>MainActivity</code> to use the <code>GameView</code> class. See the file <code>MainActivity.kt</code>.</li> </ol>"},{"location":"day01/#practice-exercise","title":"Practice Exercise","text":"<p>Your task: 1. Modify the <code>GameView</code> class to draw a rectangle that changes position each time you touch the screen. 2. Hints:    - Use <code>MotionEvent</code> to detect touch input.    - Call <code>invalidate()</code> to trigger a redraw of the view.</p>"},{"location":"day01/#summary","title":"Summary","text":"<p>Today, you learned: 1. The basics of the game loop. 2. How to set up a custom <code>SurfaceView</code> in Android. 3. How to draw on the screen using the <code>Canvas</code> API.</p> <p>These concepts are the building blocks for creating games on Android. In the next session, we\u2019ll dive into input handling to make your game interactive.</p>"},{"location":"day01/#references","title":"References","text":"<ul> <li>Android Canvas API</li> <li>SurfaceView Documentation</li> <li>Tutorials on basic game loops in Android.</li> </ul>"},{"location":"day01/#next-steps","title":"Next Steps","text":"<p>In the next chapter, we\u2019ll add interactivity to your game by handling user input, including touch gestures. Stay tuned!</p>"},{"location":"day02/","title":"Day 2: Adding Interactivity - Handling User Input","text":""},{"location":"day02/#introduction","title":"Introduction","text":"<p>Welcome to Day 2 of your game development journey! Today, we\u2019ll focus on adding interactivity to your game. You\u2019ll learn how to handle user input, such as touch events, and modify your game logic in response.</p>"},{"location":"day02/#understanding-touch-events","title":"Understanding Touch Events","text":"<p>In Android, user input is handled using MotionEvent. The most common touch actions include: - ACTION_DOWN: The user touches the screen. - ACTION_MOVE: The user moves their finger on the screen. - ACTION_UP: The user lifts their finger off the screen.</p> <p>By overriding the <code>onTouchEvent</code> method, you can detect and respond to these actions.</p>"},{"location":"day02/#updating-your-game","title":"Updating Your Game","text":""},{"location":"day02/#task-overview","title":"Task Overview","text":"<p>Today, you'll extend your <code>GameView</code> to: 1. Detect touch input. 2. Move a rectangle to the touch position. 3. Redraw the screen with the updated position.</p>"},{"location":"day02/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day02/#step-1-modify-gameview","title":"Step 1: Modify <code>GameView</code>","text":"<ol> <li>Add variables to store the rectangle\u2019s position.</li> <li>Override the <code>onTouchEvent</code> method to capture touch coordinates.</li> <li>Call <code>invalidate()</code> to trigger a redraw of the <code>SurfaceView</code>.</li> </ol> <p>Refer to the updated code in <code>GameView.kt</code>.</p>"},{"location":"day02/#step-2-visual-feedback","title":"Step 2: Visual Feedback","text":"<p>Add logic to draw a rectangle at the touch position: - Use the <code>Canvas.drawRect</code> method. - Clear the screen before redrawing by using <code>Canvas.drawColor</code>.</p>"},{"location":"day02/#practice-exercise","title":"Practice Exercise","text":"<p>Modify the program to: 1. Draw multiple rectangles on the screen, keeping track of all touch points. 2. Clear the screen when a double-tap gesture is detected.</p> <p>Hints: - Use a <code>List&lt;Pair&lt;Float, Float&gt;&gt;</code> to store touch points. - Detect double-tap gestures using <code>GestureDetector</code>.</p>"},{"location":"day02/#summary","title":"Summary","text":"<p>Today, you learned: 1. How to handle user input using <code>MotionEvent</code>. 2. How to update the game state based on touch events. 3. How to render interactive elements on the screen.</p>"},{"location":"day02/#references","title":"References","text":"<ul> <li>MotionEvent Documentation</li> <li>GestureDetector Guide</li> <li>Tutorials on handling touch input in Android.</li> </ul>"},{"location":"day02/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll add more complexity by incorporating physics-based movement. Get ready to see your objects come to life!</p>"},{"location":"day03/","title":"Day 3: Adding Physics to Your Game","text":""},{"location":"day03/#introduction","title":"Introduction","text":"<p>Today, we\u2019ll bring your game objects to life by incorporating basic physics principles. You\u2019ll learn how to: 1. Simulate movement. 2. Handle boundaries (e.g., screen edges). 3. Add gravity for a realistic effect.</p>"},{"location":"day03/#understanding-physics-in-games","title":"Understanding Physics in Games","text":"<p>Physics in games simplifies real-world principles into manageable rules. Core concepts include: - Velocity: Speed in a particular direction. - Gravity: A force pulling objects downward. - Collision Detection: Determining when objects interact.</p> <p>In this session, we\u2019ll apply these concepts to a bouncing ball simulation.</p>"},{"location":"day03/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day03/#step-1-extend-gameview","title":"Step 1: Extend <code>GameView</code>","text":"<ol> <li>Add variables for the ball's position, velocity, and radius.</li> <li>Update the <code>drawCanvas</code> method to draw a ball at the current position.</li> <li>Add a game loop to update the ball\u2019s position over time.</li> </ol> <p>Refer to the external code file <code>GameView.kt</code>.</p>"},{"location":"day03/#step-2-handle-screen-boundaries","title":"Step 2: Handle Screen Boundaries","text":"<p>Modify the game logic to: 1. Reverse the ball\u2019s velocity when it hits the screen edges. 2. Gradually reduce velocity to simulate friction.</p>"},{"location":"day03/#practice-exercise","title":"Practice Exercise","text":"<p>Expand the program to: 1. Add a second ball with its own velocity and movement logic. 2. Detect and respond to collisions between the two balls.</p> <p>Hints: - Use the distance formula to detect collisions:</p> <pre><code>distance = sqrt((x2 - x1)^2 + (y 2 - y1)^2)\n</code></pre> <ul> <li>Reverse velocities upon collision.</li> </ul>"},{"location":"day03/#summary","title":"Summary","text":"<p>Today, you learned: 1. How to simulate movement using velocity. 2. How to handle boundaries and collisions. 3. How to implement simple physics in your game.</p>"},{"location":"day03/#references","title":"References","text":"<ul> <li>Canvas.drawCircle Documentation</li> <li>Tutorials on physics simulation in Android games.</li> </ul>"},{"location":"day03/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll enhance the game by incorporating animations for smoother transitions. Get ready for a visually dynamic experience!</p>"},{"location":"day04/","title":"Day 4: Adding Animations for Smooth Gameplay","text":""},{"location":"day04/#introduction","title":"Introduction","text":"<p>Today, we\u2019ll take your game to the next level by incorporating animations. Smooth animations make games more visually appealing and immersive. You\u2019ll learn how to: 1. Use Android\u2019s <code>ValueAnimator</code> for animations. 2. Transition objects seamlessly across the screen.</p>"},{"location":"day04/#why-animations-matter","title":"Why Animations Matter","text":"<p>Animations enhance the user experience by: - Making transitions fluid and natural. - Providing feedback on user actions. - Highlighting important game events.</p> <p>In game development, animations are essential for creating a dynamic environment.</p>"},{"location":"day04/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day04/#step-1-integrate-valueanimator","title":"Step 1: Integrate <code>ValueAnimator</code>","text":"<ol> <li>Use <code>ValueAnimator</code> to create smooth movement transitions.</li> <li>Replace manual position updates with an interpolated animation.</li> <li>Synchronize animations with the game loop.</li> </ol> <p>Refer to the <code>GameView.kt</code> file for implementation details.</p>"},{"location":"day04/#step-2-add-custom-interpolators","title":"Step 2: Add Custom Interpolators","text":"<p>Experiment with custom interpolators to control the speed of animations: - Use <code>AccelerateDecelerateInterpolator</code> for natural movement. - Create a custom interpolator for unique effects.</p>"},{"location":"day04/#practice-exercise","title":"Practice Exercise","text":"<p>Enhance the program to: 1. Animate the ball\u2019s color as it moves across the screen. 2. Introduce a shrinking or growing effect during collisions.</p> <p>Hints: - Use <code>ArgbEvaluator</code> with <code>ValueAnimator</code> for color transitions. - Update the ball's radius dynamically during animations.</p>"},{"location":"day04/#summary","title":"Summary","text":"<p>Today, you learned: 1. How to use <code>ValueAnimator</code> for smooth animations. 2. How to customize animations with interpolators. 3. How to synchronize animations with game logic.</p>"},{"location":"day04/#references","title":"References","text":"<ul> <li>ValueAnimator Documentation</li> <li>Animation Interpolators Guide</li> </ul>"},{"location":"day04/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll introduce player interaction mechanics, such as buttons and game menus. Get ready to enhance user engagement!</p>"},{"location":"day05/","title":"Day 5: Player Interaction and Game Menus","text":""},{"location":"day05/#introduction","title":"Introduction","text":"<p>Interactivity is a cornerstone of any game. Today, we\u2019ll: 1. Introduce buttons and touch interactions. 2. Create a simple main menu to start the game. 3. Implement pause and resume functionality.</p>"},{"location":"day05/#why-interactivity-matters","title":"Why Interactivity Matters","text":"<p>Interactivity turns static visuals into an engaging experience. Key components include: - Touch Controls: Allow players to influence the game world. - Menus: Provide intuitive navigation and control. - Game State Management: Pause, resume, and restart gameplay seamlessly.</p>"},{"location":"day05/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day05/#step-1-create-a-main-menu","title":"Step 1: Create a Main Menu","text":"<ol> <li>Add a new <code>MenuView</code> class to display buttons (e.g., \"Start Game\").</li> <li>Use <code>TextView</code> or <code>Button</code> widgets for menu options.</li> <li>Switch to the game view when a button is tapped.</li> </ol> <p>Refer to <code>MenuView.kt</code> for implementation details.</p>"},{"location":"day05/#step-2-handle-touch-events-in-the-game","title":"Step 2: Handle Touch Events in the Game","text":"<ol> <li>Override the <code>onTouchEvent</code> method in <code>GameView</code>.</li> <li>Track the player's touch position.</li> <li>Respond to taps or swipes to move the ball or trigger actions.</li> </ol>"},{"location":"day05/#step-3-add-pause-and-resume-functionality","title":"Step 3: Add Pause and Resume Functionality","text":"<ol> <li>Introduce a \"Pause\" button.</li> <li>Use a flag to control game state (paused or running).</li> <li>Stop animations and physics updates when paused.</li> </ol> <p>Refer to <code>GameView.kt</code> for implementation details.</p>"},{"location":"day05/#practice-exercise","title":"Practice Exercise","text":"<p>Expand the program to: 1. Add a \"Restart Game\" button in the menu. 2. Display the player's score when the game is paused. 3. Allow the player to drag the ball using touch gestures.</p> <p>Hints: - Use <code>onTouchEvent</code> to track touch movements. - Maintain a score variable and update it during gameplay.</p>"},{"location":"day05/#summary","title":"Summary","text":"<p>Today, you learned: 1. How to create a simple game menu. 2. How to handle touch interactions. 3. How to implement pause, resume, and restart functionality.</p>"},{"location":"day05/#references","title":"References","text":"<ul> <li>TouchEvent Documentation</li> <li>Tutorials on game menus and interaction design.</li> </ul>"},{"location":"day05/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll add scoring and introduce obstacles to challenge the player. Get ready to make your game more competitive!</p>"},{"location":"day06/","title":"Day 6: Scoring System and Obstacles","text":""},{"location":"day06/#introduction","title":"Introduction","text":"<p>Today we will make your game more engaging by: 1. Adding a scoring system. 2. Introducing obstacles that the player must avoid. 3. Combining these features to increase the challenge.</p>"},{"location":"day06/#scoring-system","title":"Scoring System","text":"<p>A scoring system is a fundamental game mechanic to measure player progress. Key steps: - Initialize a score variable. - Increment the score as the player survives or interacts with the game. - Display the score on the screen.</p>"},{"location":"day06/#adding-obstacles","title":"Adding Obstacles","text":"<p>Obstacles create challenges and keep the game exciting. We will: 1. Create simple rectangular obstacles. 2. Randomize their position and movement. 3. Detect collisions with the player.</p>"},{"location":"day06/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day06/#step-1-implement-the-scoring-system","title":"Step 1: Implement the Scoring System","text":"<ol> <li>Add a <code>score</code> variable in <code>GameView</code>.</li> <li>Increment the score periodically as the game runs.</li> <li>Use <code>Canvas</code> to display the score on the screen.</li> </ol>"},{"location":"day06/#step-2-create-obstacles","title":"Step 2: Create Obstacles","text":"<ol> <li>Define an <code>Obstacle</code> class to represent obstacles.</li> <li>Randomize the position and speed of obstacles.</li> <li>Update their position in the game loop.</li> </ol>"},{"location":"day06/#step-3-detect-collisions","title":"Step 3: Detect Collisions","text":"<ol> <li>Check for overlap between the ball and obstacles.</li> <li>End the game if a collision occurs.</li> <li>Allow restarting the game after a collision.</li> </ol>"},{"location":"day06/#practice-exercise","title":"Practice Exercise","text":"<p>Enhance the program by: 1. Adding multiple obstacles with varying speeds. 2. Increasing the game difficulty as the score increases. 3. Providing visual feedback (e.g., flashing colors) when a collision happens.</p>"},{"location":"day06/#summary","title":"Summary","text":"<p>Today, you implemented: 1. A scoring system to track player progress. 2. Dynamic obstacles to increase the game\u2019s difficulty. 3. Collision detection to challenge the player.</p>"},{"location":"day06/#references","title":"References","text":"<ul> <li>Canvas Drawing Documentation</li> <li>Tutorials on scoring and collision detection in games.</li> </ul>"},{"location":"day06/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll add animations and sound effects to enhance the game\u2019s feedback and immersion. Get ready to bring your game to life!</p>"},{"location":"day07/","title":"Day 7: Animations and Sound Effects","text":""},{"location":"day07/#introduction","title":"Introduction","text":"<p>Today, we will enhance the game's experience by: 1. Adding animations to the player and obstacles. 2. Integrating sound effects for actions like scoring, collisions, and game events. 3. Combining animations and sounds to make gameplay more immersive.</p>"},{"location":"day07/#animations","title":"Animations","text":"<p>Animations bring life to static game elements. We will: 1. Use Android\u2019s <code>ValueAnimator</code> and <code>ObjectAnimator</code> classes for smooth transitions. 2. Apply animations to the player and obstacles.</p>"},{"location":"day07/#sound-effects","title":"Sound Effects","text":"<p>Sound effects provide instant feedback to the player. Steps to integrate: 1. Use <code>SoundPool</code> for lightweight audio effects. 2. Trigger sounds for scoring and collision events.</p>"},{"location":"day07/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day07/#step-1-add-animations","title":"Step 1: Add Animations","text":"<ol> <li>Create a pulsing animation for the player (scale up and down).</li> <li>Animate obstacle colors to shift dynamically.</li> </ol>"},{"location":"day07/#step-2-integrate-sound-effects","title":"Step 2: Integrate Sound Effects","text":"<ol> <li>Prepare sound assets (<code>score.wav</code>, <code>collision.wav</code>).</li> <li>Initialize <code>SoundPool</code> in your game.</li> <li>Play sounds based on events like scoring and collisions.</li> </ol>"},{"location":"day07/#step-3-combine-animations-and-sounds","title":"Step 3: Combine Animations and Sounds","text":"<ol> <li>Synchronize animations and sounds for key events.</li> <li>Ensure seamless integration without affecting performance.</li> </ol>"},{"location":"day07/#practice-exercise","title":"Practice Exercise","text":"<p>Enhance the program by: 1. Creating a background music loop using <code>MediaPlayer</code>. 2. Adding a countdown timer animation before the game starts. 3. Customizing animations for different obstacle types.</p>"},{"location":"day07/#summary","title":"Summary","text":"<p>Today, you learned to: 1. Use animations to enhance visual feedback. 2. Add sound effects for better user interaction. 3. Combine visual and audio elements to make your game immersive.</p>"},{"location":"day07/#references","title":"References","text":"<ul> <li>Android Animations Guide</li> <li>SoundPool Documentation</li> </ul>"},{"location":"day07/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll explore advanced topics like managing levels and saving player progress. Get ready to make your game even more feature-rich!</p>"},{"location":"day08/","title":"Day 8: Managing Game Levels and Difficulty Progression","text":""},{"location":"day08/#introduction","title":"Introduction","text":"<p>As games progress, they should become more challenging to keep players engaged. Today, we will: 1. Implement a system to manage levels. 2. Increase difficulty based on player performance. 3. Save and restore player progress using <code>SharedPreferences</code>.</p>"},{"location":"day08/#game-levels","title":"Game Levels","text":"<p>Levels introduce variety and excitement. We will: 1. Create distinct levels with increasing complexity. 2. Define criteria for advancing between levels (e.g., score thresholds).</p>"},{"location":"day08/#difficulty-progression","title":"Difficulty Progression","text":"<p>Make the game more challenging by: 1. Increasing obstacle speed. 2. Adding more obstacles dynamically. 3. Introducing level-specific rules.</p>"},{"location":"day08/#saving-progress","title":"Saving Progress","text":"<p>To ensure players can resume their progress: 1. Use <code>SharedPreferences</code> to save the current level and score. 2. Load saved data when the game starts.</p>"},{"location":"day08/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day08/#step-1-create-levels","title":"Step 1: Create Levels","text":"<ol> <li>Define a <code>Level</code> class with properties like obstacle speed and score threshold.</li> <li>Implement logic to switch levels.</li> </ol>"},{"location":"day08/#step-2-adjust-difficulty-dynamically","title":"Step 2: Adjust Difficulty Dynamically","text":"<ol> <li>Increase obstacle speed as levels progress.</li> <li>Randomize obstacle patterns for higher levels.</li> </ol>"},{"location":"day08/#step-3-save-and-load-progress","title":"Step 3: Save and Load Progress","text":"<ol> <li>Use <code>SharedPreferences</code> to store:</li> <li>Current level</li> <li>High score</li> <li>Automatically load saved progress when the game restarts.</li> </ol>"},{"location":"day08/#practice-exercise","title":"Practice Exercise","text":"<p>Enhance the game by: 1. Adding a menu screen to select levels or start a new game. 2. Implementing a visual indicator (e.g., a banner) when the player advances to the next level. 3. Creating at least three distinct levels with unique rules or visuals.</p>"},{"location":"day08/#summary","title":"Summary","text":"<p>Today, you learned to: 1. Implement a level-based structure for your game. 2. Dynamically adjust difficulty to challenge players. 3. Save and restore progress using <code>SharedPreferences</code>.</p>"},{"location":"day08/#references","title":"References","text":"<ul> <li>SharedPreferences Documentation</li> <li>Android Game Development Guide</li> </ul>"},{"location":"day08/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll focus on creating a scoring system and leaderboards. Get ready to add a competitive edge to your game!</p>"},{"location":"day09/","title":"Day 9: Implementing a Scoring System and Leaderboards","text":""},{"location":"day09/#introduction","title":"Introduction","text":"<p>A scoring system is essential in game development, and leaderboards add a competitive aspect that can motivate players. Today, we will: 1. Create a scoring system that tracks the player\u2019s progress. 2. Implement a local leaderboard using <code>SharedPreferences</code>. 3. Display the top scores for a competitive edge.</p>"},{"location":"day09/#scoring-system","title":"Scoring System","text":"<p>Scoring adds incentive for players to improve. We will: 1. Define how the score is updated (e.g., based on time, enemies defeated, or obstacles avoided). 2. Display the score in real-time on the screen.</p>"},{"location":"day09/#leaderboards","title":"Leaderboards","text":"<p>Leaderboards help create competition among players. We will: 1. Store top scores in a local leaderboard using <code>SharedPreferences</code>. 2. Display the leaderboard in the game.</p>"},{"location":"day09/#saving-and-displaying-scores","title":"Saving and Displaying Scores","text":"<ol> <li>Save the score every time the player finishes a level or reaches a milestone.</li> <li>Keep track of the top 5 scores locally.</li> <li>Display the leaderboard when the player completes the game.</li> </ol>"},{"location":"day09/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day09/#step-1-define-the-scoring-system","title":"Step 1: Define the Scoring System","text":"<ol> <li>Track the score based on in-game events (e.g., time elapsed, enemies defeated).</li> <li>Display the current score in a text field on the UI.</li> </ol>"},{"location":"day09/#step-2-create-a-leaderboard","title":"Step 2: Create a Leaderboard","text":"<ol> <li>Define a data structure to store the leaderboard (e.g., a list of top scores).</li> <li>Save the top 5 scores to <code>SharedPreferences</code>.</li> <li>Load and display the top scores when the player completes a game session.</li> </ol>"},{"location":"day09/#step-3-save-and-display-scores","title":"Step 3: Save and Display Scores","text":"<ol> <li>Use <code>SharedPreferences</code> to save:</li> <li>Player's score at the end of the game.</li> <li>The top 5 scores.</li> <li>Display the top scores in a leaderboard screen.</li> </ol>"},{"location":"day09/#practice-exercise","title":"Practice Exercise","text":"<p>Enhance the game by: 1. Implementing a \u201cGame Over\u201d screen that displays the player\u2019s score. 2. Storing and displaying the top 5 scores. 3. Adding a \u201cRetry\u201d button to allow players to replay the game.</p>"},{"location":"day09/#summary","title":"Summary","text":"<p>Today, you learned to: 1. Implement a dynamic scoring system based on in-game events. 2. Create a leaderboard using <code>SharedPreferences</code> to store top scores. 3. Display the leaderboard for a competitive experience.</p>"},{"location":"day09/#references","title":"References","text":"<ul> <li>SharedPreferences Documentation</li> <li>Game Design Best Practices</li> </ul>"},{"location":"day09/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll introduce special power-ups and items to boost the gameplay experience. Prepare for some exciting gameplay mechanics!</p>"},{"location":"day10/","title":"Day 10: Power-ups and Special Items","text":""},{"location":"day10/#introduction","title":"Introduction","text":"<p>Power-ups and special items are a great way to add excitement to your game. They give players temporary boosts, unique abilities, or advantages in overcoming challenges. Today, we will: 1. Implement a variety of power-ups in the game. 2. Allow players to collect and use these items during gameplay. 3. Modify the gameplay loop to respond to power-ups.</p>"},{"location":"day10/#types-of-power-ups","title":"Types of Power-ups","text":"<p>Power-ups can come in many forms, such as: 1. Speed Boost: Temporarily increase the player's speed. 2. Shield: Protect the player from damage for a period. 3. Score Multiplier: Increase the score earned for a limited time. 4. Invincibility: Make the player invincible for a short duration.</p>"},{"location":"day10/#creating-power-up-items","title":"Creating Power-up Items","text":"<ol> <li>Define the different types of power-ups.</li> <li>Create item sprites or UI elements to represent the power-ups in the game.</li> <li>Implement logic to collect power-ups and activate their effects.</li> </ol>"},{"location":"day10/#power-up-behavior","title":"Power-up Behavior","text":"<ol> <li>Activation: When the player collects a power-up, it triggers the associated effect.</li> <li>Duration: Each power-up lasts for a limited time.</li> <li>Effect Cleanup: After the effect expires, reset the player's state to normal.</li> </ol>"},{"location":"day10/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"day10/#step-1-define-power-up-types","title":"Step 1: Define Power-up Types","text":"<ol> <li>Create different types of power-ups such as speed boost, shield, and invincibility.</li> <li>Store each power-up\u2019s effect and duration.</li> </ol>"},{"location":"day10/#step-2-create-power-up-items","title":"Step 2: Create Power-up Items","text":"<ol> <li>Implement an item class to represent each power-up.</li> <li>Add visuals (sprites or icons) to represent the power-ups on the game screen.</li> </ol>"},{"location":"day10/#step-3-implement-power-up-logic","title":"Step 3: Implement Power-up Logic","text":"<ol> <li>Detect when the player collides with a power-up.</li> <li>Apply the corresponding effect based on the power-up type (e.g., increase speed, activate invincibility).</li> <li>Ensure the power-up lasts for a set duration, and then reset the effect.</li> </ol>"},{"location":"day10/#practice-exercise","title":"Practice Exercise","text":"<p>Enhance the game by: 1. Adding at least three different power-ups with distinct effects (e.g., speed boost, shield, score multiplier). 2. Allow players to collect power-ups during the game. 3. Display a UI element that shows the currently active power-up and its time remaining.</p>"},{"location":"day10/#summary","title":"Summary","text":"<p>Today, you learned to: 1. Implement various power-ups with different effects. 2. Create power-up items that players can collect during gameplay. 3. Modify gameplay mechanics to respond to power-up activation.</p>"},{"location":"day10/#references","title":"References","text":"<ul> <li>Power-up Design in Games</li> <li>Android Game Development Best Practices</li> </ul>"},{"location":"day10/#next-steps","title":"Next Steps","text":"<p>In the next session, we\u2019ll focus on saving player progress, including power-ups, scores, and levels, using databases. Prepare to introduce persistent storage into your game!</p>"}]}